function(px4_nuttx_add_export)

	px4_parse_function_args(
		NAME px4_nuttx_add_export
		ONE_VALUE OUT CONFIG THREADS
		MULTI_VALUE DEPENDS
		REQUIRED OUT CONFIG THREADS
		ARGN ${ARGN})

	set(nuttx_src ${CMAKE_BINARY_DIR}/${CONFIG}/NuttX)

	# patch
	add_custom_target(__nuttx_patch_${CONFIG})
	file(GLOB nuttx_patches RELATIVE ${CMAKE_SOURCE_DIR}
	    ${CMAKE_SOURCE_DIR}/nuttx-patches/*.patch)
	foreach(patch ${nuttx_patches})
		string(REPLACE "/" "_" patch_name "${patch}-${CONFIG}")
	    message(STATUS "nuttx-patch: ${patch}")
		add_custom_command(OUTPUT nuttx_patch_${patch_name}.stamp
			COMMAND ${PATCH} -p0 -N  < ${CMAKE_SOURCE_DIR}/${patch}
			COMMAND ${TOUCH} nuttx_patch_${patch_name}.stamp
			DEPENDS ${DEPENDS}
			)
	    add_custom_target(nuttx_patch_${patch_name}
			DEPENDS nuttx_patch_${patch_name}.stamp)
	    add_dependencies(nuttx_patch nuttx_patch_${patch_name})
	endforeach()

	# copy
	add_custom_command(OUTPUT nuttx_copy_${CONFIG}.stamp
		COMMAND ${MKDIR} -p ${CMAKE_BINARY_DIR}/${CONFIG}
		COMMAND ${MKDIR} -p ${nuttx_src}
		COMMAND ${CP} -a ${CMAKE_SOURCE_DIR}/NuttX/. ${nuttx_src}/
		COMMAND ${RM} -rf ${nuttx_src}/.git
		COMMAND ${TOUCH} nuttx_copy_${CONFIG}.stamp
		DEPENDS ${DEPENDS})
	add_custom_target(__nuttx_copy_${CONFIG}
		DEPENDS nuttx_copy_${CONFIG}.stamp __nuttx_patch_${CONFIG})

	# export
	file(GLOB_RECURSE config_files ${CMAKE_SOURCE_DIR}/nuttx-configs/${CONFIG}/*)
	add_custom_command(OUTPUT ${CMAKE_BINARY_DIR}/${CONFIG}.export
		COMMAND ${ECHO} Configuring NuttX for ${CONFIG}
		COMMAND ${MAKE} --no-print-directory -C${nuttx_src}/nuttx -r --quiet distclean
		COMMAND ${CP} -r ${CMAKE_SOURCE_DIR}/nuttx-configs/${CONFIG} ${nuttx_src}/nuttx/configs
		COMMAND cd ${nuttx_src}/nuttx/tools && ./configure.sh ${CONFIG}/nsh
		COMMAND ${ECHO} Exporting NuttX for ${CONFIG}
		COMMAND ${MAKE} --no-print-directory --quiet -C ${nuttx_src}/nuttx -j${THREADS} -r CONFIG_ARCH_BOARD=${CONFIG} export > /dev/null
		COMMAND ${CP} -r ${nuttx_src}/nuttx/nuttx-export.zip ${CMAKE_BINARY_DIR}/${CONFIG}.export
		DEPENDS ${config_files} ${DEPENDS} __nuttx_copy_${CONFIG})

	# extract
	add_custom_command(OUTPUT nuttx_export_${CONFIG}.stamp
		COMMAND ${RM} -rf ${nuttx_src}/nuttx-export
		COMMAND ${UNZIP} -q ${CMAKE_BINARY_DIR}/${CONFIG}.export -d ${nuttx_src}
		COMMAND ${TOUCH} nuttx_export_${CONFIG}.stamp
		DEPENDS ${DEPENDS} ${CMAKE_BINARY_DIR}/${CONFIG}.export)

	add_custom_target(${OUT}
		DEPENDS nuttx_export_${CONFIG}.stamp)

endfunction()


终于找到了cmake的调试方法:

add_custom_command(OUTPUT ${CMAKE_BINARY_DIR}/${CONFIG}.export
	COMMAND ${ECHO} Configuring NuttX for ${CONFIG}
	COMMAND ${MAKE} --no-print-directory -C${nuttx_src}/nuttx -r --quiet distclean
	COMMAND ${CP} -r ${CMAKE_SOURCE_DIR}/nuttx-configs/${CONFIG} ${nuttx_src}/nuttx/configs
	COMMAND cd ${nuttx_src}/nuttx/tools && ./configure.sh ${CONFIG}/nsh
	COMMAND echo "-------------------------test"
	COMMAND echo "-------------------------test"
	COMMAND ${ECHO} Exporting NuttX for ${CONFIG}
	COMMAND ${MAKE} --no-print-directory --quiet -C ${nuttx_src}/nuttx -j${THREADS} -r CONFIG_ARCH_BOARD=${CONFIG} export > /dev/null
	COMMAND ${CP} -r ${nuttx_src}/nuttx/nuttx-export.zip ${CMAKE_BINARY_DIR}/${CONFIG}.export
	DEPENDS ${config_files} ${DEPENDS} __nuttx_copy_${CONFIG})

调试信息：

调试信息Exporting NuttX for px4io-v2
make[4]: warning: -jN forced in submake: disabling jobserver mode.
yangang px4fmu-v2
调试信息Exporting NuttX for px4fmu-v2
make[4]: warning: -jN forced in submake: disabling jobserver mode.


编译信息输出到空 >/dev/null

COMMAND ${MAKE} --no-print-directory --quiet -C ${nuttx_src}/nuttx -j${THREADS} -r CONFIG_ARCH_BOARD=${CONFIG} export >/dev/null

COMMAND ${MAKE} --no-print-directory --quiet -C ${nuttx_src}/nuttx -j${THREADS} -r CONFIG_ARCH_BOARD=${CONFIG} export 


编译器没有发现.
/home/yangang/work/theone_proj/firmware/theone-mc/build_theone/px4fmu-v2/NuttX/nuttx/tools/mkdeps.sh: line 94: arm-nuttx-eabi-gcc: command not found

指定编译器

 find -name "debug.h" -type f
./include/c++/5.4.1/debug/debug.h

youtube网址
Makefile.unix:391: recipe for target 'include/arch/board' failed

lrwxrwxrwx 1 yangang yangang 78 May 16 11:54 arch -> /home/yangang/work/theone_proj/firmware/theone-mc/NuttX/nuttx/arch/arm/include

在其他地方编译

1. Make export

There is a make target called make export. It will build NuttX, then bundle all of the header files, libaries, startup objects, and other build components into a .zip file. You can can move that .zip file into any build environment you want. You even build NuttX under a DOS CMD window. 


# dirlinks, and helpers
#
# Directories links.  Most of establishing the NuttX configuration involves
# setting up symbolic links with 'generic' directory names to specific,
# configured directories.
#
# Link the arch/<arch-name>/include directory to include/arch

include/arch: Make.defs
        @echo "LN: include/arch to $(ARCH_DIR)/include"
        $(Q) $(DIRLINK) $(TOPDIR)/$(ARCH_DIR)/include include/arch


创建连接。


丢失一些依赖库
Processing triggers for gconf2 (3.2.6-3ubuntu5) ...

//最新的配置不需要--enbale
configure: Configured with:
configure: - parser library     : shared (version: 3.12.0)
configure:   - root-menu prompt : Configuration
configure:   - config prefix    : CONFIG_
configure: - frontends          : conf gconf mconf nconf qconf
configure:   - transform name   : s&^&kconfig-&
configure:   - localised        : yes
configure: - install utilities  : yes
configure: - CFLAGS CXXFLAGS    : -Wall 


config.status: creating libs/lxdialog/Makefile
config.status: creating libs/parser/Makefile
config.status: creating frontends/Makefile
config.status: creating frontends/conf/Makefile
config.status: creating frontends/mconf/Makefile
config.status: creating frontends/nconf/Makefile
config.status: creating frontends/gconf/Makefile
config.status: creating frontends/qconf/Makefile
config.status: creating utils/Makefile
config.status: creating scripts/Makefile
config.status: creating scripts/.autostuff/config.h
config.status: executing depfiles commands
config.status: executing libtool commands
configure: 
configure: Configured with:
configure: - parser library     : shared (version: 3.12.0)
configure:   - root-menu prompt : Configuration
configure:   - config prefix    : CONFIG_
configure: - frontends          : conf gconf mconf nconf qconf
configure:   - transform name   : s&^&kconfig-&
configure:   - localised        : yes
configure: - install utilities  : yes
configure: - CFLAGS CXXFLAGS    : -Wall 

