1,:4800, 19132962
1,:4800, 19137713
1,:4800, 19143315
1,:4800, 19147321
1,:4800, 19152116
1,:4800, 19156913
1,:4801, 19161723
1,:4799, 19167311
1,:4801, 19171317
1,:4800, 19176117
1,:2400, 19180138
1,:4800, 19184909
1,:4800, 19189709
1,:4800, 19193711
1,:4800, 19198512
1,:4799, 19203319
1,:4801, 19207320
1,:4800, 19212120
1,:4800, 19216914
1,:4800, 19221717
1,:4800, 19227325
1,:4799, 19231316
1,:4800, 19236116
1,:4800, 19240913
1,:4800, 19245716
1,:4800, 19251311
1,:4800, 19255316
1,:4800, 19260116
1,:4801, 19264914
1,:4799, 19269719
1,:4800, 19275311
1,:4800, 19279324
1,:4801, 19284117
1,:4800, 19288919
1,:4800, 19293717
1,:4800, 19299312
1,:4800, 19303317
1,:4800, 19308117
1,:4800, 19312965
1,:4800, 19317717


250HZ: 4000us


1,:4800, 6
1,:4800, 9
1,:4840, 6
1,:4761, 6
1,:4799, 6
1,:4801, 6
1,:4800, 6
1,:4800, 6
1,:7199, 6
1,:2401, 7
1,:4800, 6
1,:4799, 6
1,:4800, 6
1,:4800, 6
1,:7207, 6
1,:2394, 6
1,:4799, 6
1,:4801, 6
1,:7199, 6
1,:4800, 6
1,:4800, 6
1,:4800, 6
1,:4800, 6
1,:4800, 6
1,:4801, 14
1,:4800, 6
1,:7205, 6
1,:2394, 6
1,:4800, 6
1,:4801, 6
1,:7200, 7
1,:4800, 6
1,:4799, 6
1,:4812, 6




//orb时间是70us

if (i == 0 ) 
{
	printf("%d,:%llu, %llu，%llu\r\n", i, raw.accelerometer_timestamp[i], current_timestamp[i], current_timestamp[i]-raw.accelerometer_timestamp[i]);
}

0,:168302940, 168303010，70
0,:168307740, 168307814，74
0,:168313340, 168313405，65
0,:168318140, 168318205，65
0,:168322940, 168323005，65
0,:168327740, 168327805，65
0,:168333339, 168333405，66
0,:168337340, 168337405，65
0,:168342140, 168342205，65
0,:168346940, 168347005，65
0,:168351740, 168351806，66
0,:168357340, 168357405，65
0,:168362140, 168362205，65
0,:168366940, 168367006，66
0,:168371740, 168371805，65
0,:168377340, 168377406，66
0,:168382140, 168382205，65
0,:168386940, 168387006，66
0,:168391740, 168391805，65
0,:168397340, 168397406，66
0,:168402140, 168402205，65
0,:168406940, 168407006，66
0,:168410949, 168411020，71
0,:168415750, 168415815，65
0,:168420561, 168420627，66
0,:168426140, 168426205，65
0,:168430940, 168431005，65
0,:168434947, 168435012，65
0,:168439740, 168439809，69
0,:168444540, 168444605，65
0,:168450139, 168450205，66
0,:168454140, 168454205，65
0,:168458940, 168459006，66

/*误差是1600us，800us＊2倍，　最高是5600，最低是4000us正好　*/
0,5595,66 
0,4005,65 
0,4800,66 
0,4803,69 
0,4797,74 
0,5597,65 
0,4003,114 
0,4800,65 
0,4803,65 
0,4797,68 
0,5595,114 
0,4005,65 
0,4800,65 
0,5595,69 
0,4005,70 
0,5595,66 
0,4005,66 
0,4800,66 
0,4815,72 
0,4785,69 
0,5595,66 
0,4005,66 
0,4800,66 
0,5596,65 
0,4006,66 
0,5593,65 
0,4004,66 
0,4801,65 
0,4803,68 
0,4797,65 

//2000us误差，误差是800*2

//4000us采集一次，2000us误差是正确的 6000us

		# FMUv2
#		if adxrs450 start
#		then
#		fi



		if mpu6000 -R 14 start
		then
		fi
		
		if sca3300 start
		then
		fi

		  static uint64_t last_timestamp[3];
            static uint64_t diff_timestamp[3];
            static bool firsrt_timestamp[3] = {false, false, false};
            // static uint64_t last1_timestamp[3];
            uint64_t current_timestamp[3];

            /* get current time */
            current_timestamp[i]  =  hrt_absolute_time();
            
            if (!firsrt_timestamp[i])
            {
               firsrt_timestamp[i] = true;

            }  else {
				diff_timestamp[i] = raw.accelerometer_timestamp[i] - last_timestamp[i];
				diff_timestamp[i] =diff_timestamp[i];
				// if (i == 0 && diff_timestamp[i] > 5000) {
				//if (i == 1 && diff_timestamp[1] > 6500) {
				// if (i == 1 ) {
				// 	printf("%d,:%llu, %llu\r\n", i, diff_timestamp[i], current_timestamp[i] - last1_timestamp[i]);
				// }
 
               if (i == ０ ) {
					printf("%d,%llu,%llu \r\n", i, diff_timestamp[i], current_timestamp[i]-raw.accelerometer_timestamp[i]);
				}
                 
    //             if (i == 1 ) {
				// 	printf("%d,:%llu, %llu\r\n", i, diff_timestamp[i], current_timestamp - last1_timestamp);
				// }

			}
            // last1_timestamp[i]    = current_timestamp[i]; 
			last_timestamp[i]  = raw.accelerometer_timestamp[i] ;



//mpu6000数格式,adxrs450先启动导致的问题.
0,3999,2067 
0,4001,2925 
0,3999,3792 
0,8000,658 
0,4001,1523 
0,3999,2390 
0,4003,3315 
0,8122,67 
0,3876,1030 
0,3998,1854 
0,4002,2718 
0,4006,3578 
0,7992,452 
0,4002,1356 
0,3998,2187 
0,4001,3049 
0,4000,3922 
0,7999,783 
0,4018,1668 
0,3983,2569 
0,4000,3413 
0,8000,298 
0,4001,1111 
0,3999,1978 
0,4001,2843 
0,3999,3727 
0,7999,580 
0,4002,1445 
0,3998,2311 
0,4001,3180 
0,8043,61 
0,3956,962 
0,4000,1823 
0,4002,2637 
0,3999,3507 
0,8000,369 
0,4000,1239 
0,4044,2058 
0,3957,2967 
0,3999,3834 

