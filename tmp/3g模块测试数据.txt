1. 建立连接的前提是:

1. 服务器建立
2. 客户端主动连接服务器
3. 连接成功，服务器会显示客户端的ip地址和端口号


客户端创建后, 一直阻塞等待连接服务器.

硬件：
TX:
RX:
POWRE:
RST:


#define TXD_SUM             2048                         //发送缓冲区大小

PB7： 有个灯:


RxCnt2 = RXD_SUM - DMA_GetCurrDataCounter(DMA1_Channel6); // 2048 - 1000 = 1048个
 Reciveok2 = 1 ;//接收完成


void TIM2_IRQHandler(void)
->  if( SIM5320Dealy == 1 )
         {
             SIM5320Cnt -- ;
             if( SIM5320Cnt == 0 )
             {
                 SIM5320Step ++ ;
                 SIM5320Dealy = 0 ;
                 StateChange = 1 ;
             }    
         }    


//无心跳超时间， 重启3g
 if( KeyCnt >= 10 )
 {
     KeyCnt = 0 ;
     KeyScan = 1 ;
     
     if( SIM5320Flag == 1 )
     {
         if( SIM5320Time < SIM5320OutTime*10 )
         {    
             SIM5320Time ++ ;
         }
     }
     //--------------ID超时处理
     if( FlyFlag == 1 )
     {
         FlyOutTime ++ ;
     }
     //--------------3G心跳超时
     if(  SIM5320Connet == 2  )
     {
         Hart_3GCnt ++ ;
     }               
 } 


 如何保证数据，和飞控没关系，仅仅收到数据。
SIM5320Step == 0 就是要重启3g模块

 StateChange = 1 ; 状态发生改变

//3g模块返回关闭，
if(  Str_Compare( RxBuffer2, Respond_Connection_ERROR,RxCnt2 ) !=  NULL )
	-> SIM5320Step == 0 

//超时发送
if( SIM5320Time >= SIM5320OutTime*10 ) 
	-> SIM5320Step = 0 ;


struct AT_Command
{
    u8 Sent_AT[50] ;    //-----需要发送的字符串
    u8 Read_AT[20] ;    //-----需要接收的字符串
    u8 WaitTime    ;    //-----等待时间
} ;

const struct AT_Command  Use_AT[] = {


封装函数

异步socket:

连接完成
void qxwz_soc_connect_complete(qxwz_soc soc,int8_t connect_status);

发送完成
void qxwz_soc_send_complete(qxwz_soc soc,qxwz_ssize_t send_length);

关闭socket
void qxwz_soc_close_complete(qxwz_soc soc,int8_t close_status);


创建socekt 
qxwz_soc qxwz_soc_create(void);

连接socket 
int8_t qxwz_soc_connect(qxwz_soc soc,qxwz_soc_address address);

//发送完成
qxwz_ssize_t qxwz_soc_send(qxwz_soc soc,char *send_buffer,size_t length); 

//接收完成
void qxwz_on_soc_data_received(qxwz_soc soc, char * buffer, size_t length);


//关闭socket
void qxwz_soc_close(qxwz_soc soc);


//通知socket发生错误
void qxwz_soc_error(qxwz_soc soc);


3g模块校验工作是否正常：

1. 3g模块返回close
2. 主动读取3g模块的状态.


使能Log输出
 qxwz_prefs_flags_set(QXWZ_PREFS_FLAG_ENABLE_LOG);

不能指定长度清除数据，效率太低
void ClrUsart2TXM( void )
{
    u16 i ;
    u32 *p = (u32 *)TXM2buff ;
    for( i=0; i<TXD_SUM/4; i++ )
    {
        *(p+i) = 0 ;
    } 
    
    TXM2Cnt = 0 ;
}

调用输出
void Deal_AT_Commend( void )
	if( ( SentFlag == 1 ) && ( SentOK2 == 1 ) )
	{
		SentFlag = 0 ;
		        
		DMA_Cmd(DMA1_Channel7, DISABLE);  //改变datasize前先要禁止通道工作 
		DMA1_Channel7->CNDTR = TxCnt2 ;   //DMA1,传输数据量 
		SentOK2 = 0;                      //DMA传输开始标志量 
		DMA_Cmd(DMA1_Channel7, ENABLE); 
	}



if( ( SIM5320Connet != 0 ) && ( SIM5320Sent == 1 ) )
{
	if( SentOK2 == 1 )
	{    
		SIM5320Sent = 0 ;
		TxCnt2 = 0 ;


连接到服务器，就闪烁LED

  if( SIM5320State == 14 )
             {
                 if( WP->SIM5320E_ASK == 0 )   
                 {    
                     SIM5320Time = 0 ;
                     SIM5320Flag = 0 ;
                 }      
                 SIM5320Connet = 1 ;    //----连接上远程
                 StateChange = 0 ;
                 Hart_3GCnt = 0 ;
                 
                 TIM_Cmd(TIM3, ENABLE);   


经常自动复位: 不知道为什么
void Mode3G_Ini( void )
{
    switch( SIM5320Step )
    {
        case 0 : SIM5320POW_OFF( ) ;SIM5320Dealy = 1 ; SIM5320Cnt  = 5 ; break ;
        case 1 : SIM5320POW_ON( )  ;SIM5320Dealy = 1 ; SIM5320Cnt  = 5 ; break ;
        case 2 : MCU_RST_OFF( ) ; SIM5320Dealy = 1 ; SIM5320Cnt  = 5  ;  TIM_Cmd(TIM3, DISABLE); LED1_OFF( ) ; break ;


//定时器4，利用直接等死作为延时
void Delayms( u16 ms )
{
    TIM_TimeBaseInitTypeDef   TIM_TimeBaseStructure;
    
    while( ms--)
    {
        TIM_TimeBaseStructure.TIM_Period          = 1000;                     //自动重装计数值
        TIM_TimeBaseStructure.TIM_Prescaler       = (72 - 1 );                //1us
        TIM_TimeBaseStructure.TIM_ClockDivision   = 0;                        //时钟分频因子
        TIM_TimeBaseStructure.TIM_CounterMode     = TIM_CounterMode_Up;       //计数模式
        TIM_TimeBaseStructure.TIM_RepetitionCounter = 0 ;
        TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);
   
        TIM_ClearFlag(TIM4, TIM_FLAG_Update);			 //清除溢出中断标志	
        TIM_ITConfig(TIM4,TIM_IT_Update,ENABLE);	     //TIM enable counter  
    
        T4_Int_Flag = 0 ;
        
        TIM_Cmd(TIM4, ENABLE);                           //开始计数
    
        while( T4_Int_Flag == 0 ) ;
        
        //---------------------喂狗
        IWDG_Init( );
    }
}

上线成功：主动发送一次数据给服务器:

       if(  Str_Compare( RxBuffer2, p,RxCnt2 ) !=  NULL )
         {             
             SIM5320State ++ ;
             //--------------------------判断是否成功连接到远程
             if( SIM5320State == 14 )
             {
                 if( WP->SIM5320E_ASK == 0 )   
                 {    
                     SIM5320Time = 0 ;
                     SIM5320Flag = 0 ;
                 }      
                 SIM5320Connet = 1 ;    //----连接上远程
                 SIM5320Sent = 1 ;




//长度是0导致DMA死机.
 if (TXM2Cnt > 0)  {
    TxCnt2 = 0 ;


//获取成功和失败

if(qxwz_prefs_flags_get() & QXWZ_PREFS_FLAG_SOCKET_ASYN){
		s_connect_fail_flag = TRUE;
	}


调试信息成功:
------------------------------------------------------------
httprequest.c, qxwz_http_request, Line#73
 qxwz **** create socket


httprequest.c, qxwz_http_request, Line#81
 qxwz **** begin connect


httprequest.c, qxwz_http_request, Line#96
 qxwz **** send data


httprequest.c, qxwz_http_request, Line#100
 qxwz **** error send  data


//时间戳失败
qxwz_rtcm.c, qxwz_getservertimestampcallback, Line#228
 get server timestamp error



qxwz_rtcm.c, qxwz_setting, Line#90
 rtcm set config

qxwz_rtcm.c, qxwz_start, Line#150
 rtcm start
SIM5320State: 2
SIM5320State: 3
SIM5320State: 4
SIM5320State: 5
SIM5320State: 6
SIM5320State: 7
SIM5320State: 8
SIM5320State: 9
SIM5320State: 10
SIM5320State: 11
SIM5320State: 12
SIM5320State: 13

发现问题：

主机连接不下去，一直连接sim模块???


qxwz_socket.c, socket_tick, Line#55
qxwz **** call tick


qxwz_socket.c, socket_tick, Line#63
qxwz **** no data


服务器没有连接成功，就不会启动tick触发一些机制


创建套接字是异步处理的. create无法异步处理，

发送阻塞过程.

完成内容
 * FMU各个驱动模块的测试，代码跟踪，启动脚本rcS
 * 千寻位置的linux版本测试
 * stm32的千寻位置的软件研究
遇到的问题
 * 暂时无问题	
预计解决方案
 * 暂时无问题
预计完成时间
 * STM32千寻位置测试软件还需1~2天